basePath: /
definitions:
  errors.Error:
    properties:
      applicationName:
        type: string
      description:
        type: string
      errorCode:
        type: integer
      operation:
        type: string
      statusCode:
        type: integer
    type: object
  models.Answer:
    properties:
      body:
        type: string
      createdAt:
        type: integer
      id:
        type: string
      ticketId:
        type: string
      updatedAt:
        type: integer
      userId:
        type: string
    type: object
  models.Attachment:
    properties:
      fileName:
        type: string
      filePath:
        type: string
    type: object
  models.TicketRequest:
    properties:
      attachments:
        items:
          $ref: '#/definitions/models.Attachment'
        type: array
      body:
        type: string
      status:
        type: string
      subject:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Ticket Service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Ticket Service
  version: "1.0"
paths:
  /ticket:
    post:
      consumes:
      - application/json
      description: Create Ticket
      parameters:
      - description: For Create a Ticket
        in: body
        name: models.TicketRequest
        required: true
        schema:
          $ref: '#/definitions/models.TicketRequest'
      - description: Ticket ID
        in: query
        name: ticketId
        type: string
      - description: User ID
        in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Create a Ticket by user and category Id
      tags:
      - Tickets
  /ticket/{ticketId}:
    delete:
      consumes:
      - application/json
      description: Delete Ticket by ID
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            type: boolean
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Delete Ticket
      tags:
      - Tickets
    get:
      consumes:
      - application/json
      description: Get Ticket by ID
      parameters:
      - description: Ticket ID
        in: query
        name: ticketId
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Get Ticket by Id
      tags:
      - Tickets
    put:
      consumes:
      - application/json
      description: Update Answer by ID
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            type: boolean
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Update Answer
      tags:
      - Answers
  /ticket/{ticketId}/answer:
    post:
      consumes:
      - application/json
      description: Create Answer by user and ticket id
      parameters:
      - description: User ID
        in: query
        name: userId
        type: string
      - description: For Create an Answer
        in: body
        name: models.Answer
        required: true
        schema:
          $ref: '#/definitions/models.Answer'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "404":
          description: Not Found
          schema:
            type: boolean
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Create Answer
      tags:
      - Answers
schemes:
- http
swagger: "2.0"
